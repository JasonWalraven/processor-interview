"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/processor/process-transactions/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchProcessorCount: () => (/* binding */ fetchProcessorCount),\n/* harmony export */   fetchProcessorData: () => (/* binding */ fetchProcessorData),\n/* harmony export */   fetchRejectedTransactionsCount: () => (/* binding */ fetchRejectedTransactionsCount),\n/* harmony export */   fetchReportingByCard: () => (/* binding */ fetchReportingByCard),\n/* harmony export */   fetchReportingByCardType: () => (/* binding */ fetchReportingByCardType),\n/* harmony export */   fetchReportingByDay: () => (/* binding */ fetchReportingByDay),\n/* harmony export */   formatCurrency: () => (/* binding */ formatCurrency),\n/* harmony export */   formatDate: () => (/* binding */ formatDate),\n/* harmony export */   formatDateTime: () => (/* binding */ formatDateTime),\n/* harmony export */   mapTransactionStatus: () => (/* binding */ mapTransactionStatus),\n/* harmony export */   submitProcessorData: () => (/* binding */ submitProcessorData)\n/* harmony export */ });\n// Use environment variable with fallback\nconst BASE_URL = \"https://localhost:7039\" || 0;\nconst ITEMS_PER_PAGE = 25;\nasync function fetchProcessorCount(cardNumber, status) {\n    try {\n        const response = await fetch(\"\".concat(BASE_URL, \"/ProcessorCount?cardNumber=\").concat(cardNumber, \"&status=\").concat(status));\n        const count = await response.json();\n        const totalPages = Math.ceil(Number(count) / ITEMS_PER_PAGE);\n        return totalPages;\n    } catch (error) {\n        console.error('Error fetching processor count:', error);\n        return 0;\n    }\n}\nasync function fetchProcessorData(pageNum, cardNumber, status) {\n    try {\n        console.log(\"Calling API: \".concat(BASE_URL, \"/Processor?pageNumber=\").concat(pageNum, \"&cardNumber=\").concat(cardNumber || '', \"&status=\").concat(status || ''));\n        const response = await fetch(\"\".concat(BASE_URL, \"/Processor?pageNumber=\").concat(pageNum, \"&cardNumber=\").concat(cardNumber || '', \"&status=\").concat(status || ''));\n        if (!response.ok) {\n            throw new Error(\"API responded with status: \".concat(response.status));\n        }\n        const transactions = await response.json();\n        console.log('Raw transaction data:', transactions);\n        // Ensure we have a valid array\n        if (!Array.isArray(transactions)) {\n            console.error('API did not return an array:', transactions);\n            return [];\n        }\n        // Map and validate the data\n        const validatedTransactions = transactions.map((item)=>({\n                id: Number(item.id || 0),\n                cardNumber: String(item.cardNumber || ''),\n                cardType: String(item.cardType || ''),\n                amount: Number(item.amount || 0),\n                transactionTimeStamp: String(item.transactionTimeStamp || ''),\n                transactionStatus: Number(item.transactionStatus || 0),\n                transactionProcessedTimeStamp: String(item.transactionProcessedTimeStamp || '')\n            }));\n        return validatedTransactions;\n    } catch (error) {\n        console.error('Error fetching processor data:', error);\n        return [];\n    }\n}\nasync function fetchRejectedTransactionsCount() {\n    try {\n        console.log(\"Calling API for rejected count: \".concat(BASE_URL, \"/ProcessorCount?status=Rejected\"));\n        const response = await fetch(\"\".concat(BASE_URL, \"/ProcessorCount?status=Rejected\"));\n        if (!response.ok) {\n            throw new Error(\"API responded with status: \".concat(response.status));\n        }\n        const count = await response.json();\n        console.log('Rejected transactions count:', count);\n        const totalPages = Math.ceil(Number(count) / ITEMS_PER_PAGE);\n        console.log(\"Total pages for rejected transactions: \".concat(totalPages));\n        return totalPages;\n    } catch (error) {\n        console.error('Error fetching rejected transactions count:', error);\n        return 0;\n    }\n}\nasync function fetchReportingByCard() {\n    try {\n        console.log(\"Calling API: \".concat(BASE_URL, \"/ReportingByCard\"));\n        const response = await fetch(\"\".concat(BASE_URL, \"/ReportingByCard\"));\n        if (!response.ok) {\n            throw new Error(\"API responded with status: \".concat(response.status));\n        }\n        const results = await response.json();\n        console.log('Raw API response:', results);\n        // Ensure we have a valid array\n        if (!Array.isArray(results)) {\n            console.error('API did not return an array:', results);\n            return [];\n        }\n        // Map and validate the data structure\n        const cardReports = results.map((item)=>({\n                cardNumber: String(item.cardNumber || ''),\n                transactionCount: Number(item.transactionCount || 0),\n                totalAmount: Number(item.totalAmount || 0)\n            }));\n        return cardReports;\n    } catch (error) {\n        console.error('Error fetching reporting by card:', error);\n        return [];\n    }\n}\nasync function fetchReportingByCardType() {\n    try {\n        console.log(\"Calling API: \".concat(BASE_URL, \"/ReportingByCardType\"));\n        const response = await fetch(\"\".concat(BASE_URL, \"/ReportingByCardType\"));\n        if (!response.ok) {\n            throw new Error(\"API responded with status: \".concat(response.status));\n        }\n        const results = await response.json();\n        console.log('Raw API response:', results);\n        // Ensure we have a valid array\n        if (!Array.isArray(results)) {\n            console.error('API did not return an array:', results);\n            return [];\n        }\n        // Map and validate the data\n        const cardTypeReports = results.map((item)=>({\n                cardType: String(item.cardType || ''),\n                transactionCount: Number(item.transactionCount || 0),\n                totalAmount: Number(item.totalAmount || 0)\n            }));\n        return cardTypeReports;\n    } catch (error) {\n        console.error('Error fetching reporting by card type:', error);\n        return [];\n    }\n}\nasync function fetchReportingByDay() {\n    try {\n        console.log(\"Calling API: \".concat(BASE_URL, \"/ReportingByDay\"));\n        const response = await fetch(\"\".concat(BASE_URL, \"/ReportingByDay\"));\n        if (!response.ok) {\n            throw new Error(\"API responded with status: \".concat(response.status));\n        }\n        const results = await response.json();\n        console.log('Raw API response:', results);\n        // Ensure we have a valid array\n        if (!Array.isArray(results)) {\n            console.error('API did not return an array:', results);\n            return [];\n        }\n        // Map and validate the data\n        const dailyReports = results.map((item)=>({\n                transactionDate: String(item.transactionDate || ''),\n                transactionCount: Number(item.transactionCount || 0),\n                totalAmount: Number(item.totalAmount || 0)\n            }));\n        return dailyReports;\n    } catch (error) {\n        console.error('Error fetching reporting by day:', error);\n        return [];\n    }\n}\nasync function submitProcessorData(type, data) {\n    try {\n        // Always use uppercase for format type as expected by API\n        const dataType = type.toUpperCase();\n        console.log(\"Submitting \".concat(dataType, \" data to \").concat(BASE_URL, \"/Processor\"));\n        console.log(\"Input format type: \".concat(type, \", normalized to: \").concat(dataType));\n        // Important: The API expects \"type\" as the property name, not \"dataType\"\n        const bulkTransaction = {\n            type: dataType,\n            data: data\n        };\n        console.log('Request payload structure:', {\n            type: bulkTransaction.type,\n            dataLength: bulkTransaction.data.length,\n            dataSample: bulkTransaction.data.substring(0, 50) + '...'\n        });\n        const response = await fetch(\"\".concat(BASE_URL, \"/Processor/bulk\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(bulkTransaction)\n        });\n        console.log('API response status:', response.status);\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error(\"API Error (\".concat(response.status, \"):\"), errorText);\n            throw new Error(\"Server returned \".concat(response.status, \": \").concat(errorText || response.statusText));\n        }\n        const result = await response.json().catch(()=>({\n                message: 'Data submitted successfully'\n            }));\n        console.log('API Response:', result);\n        return result;\n    } catch (error) {\n        console.error('Error submitting processor data:', error);\n        throw error;\n    }\n}\nfunction formatDate(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n        month: '2-digit',\n        day: '2-digit',\n        year: 'numeric'\n    });\n}\nfunction formatDateTime(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n        month: '2-digit',\n        day: '2-digit',\n        year: 'numeric'\n    }) + ' ' + date.toLocaleTimeString('en-US', {\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false\n    });\n}\nfunction formatCurrency(amount) {\n    return new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD',\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n    }).format(amount);\n}\nfunction mapTransactionStatus(status) {\n    switch(status){\n        case 1:\n            return 'Accepted';\n        case 2:\n            return 'Rejected';\n        default:\n            return 'Unknown';\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});